{"version":3,"file":"static/js/30.d33d80d9.chunk.js","mappings":"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","sources":["pages/Sudoku.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport \"../styles/sudoku.css\";\n\nconst Sudoku = () => {\n\n    const [sudoku, setSudoku] = useState([]);\n    const [sudokuSolved, setSudokuSolved] = useState([]);\n    const [colors, setColors] = useState([]);\n    \n    const setSudokuValue = (row, col, value) => {\n      var newSudoku = sudoku;\n      newSudoku[row][col] = Number(value);\n      setSudoku(newSudoku);\n\n      if(value != sudokuSolved[row][col]){\n        var newColors = colors;\n        newColors[row][col] = \"red\";\n        setColors(newColors);\n      }\n      else {\n        var newColors = colors;\n        newColors[row][col] = \"white\";\n        setColors(newColors);\n      }\n    }\n\n    const generateSudoku = () => {\n\n        var grid = [];\n        for (var i = 0; i < 9; i++) {\n          grid[i] = [];\n          for (var j = 0; j < 9; j++) {\n            grid[i][j] = 0;\n          }\n        }\n      \n        solveSudoku(grid);\n\n        let newGrid = Array.from(grid, (arr) => [...arr]);\n\n        setSudokuSolved(newGrid);\n\n        removeNumbers(grid);\n\n        setSudoku(grid);\n    }\n\n    const shuffle = (array) => {\n      let currentIndex = array.length;\n      let randomIndex;\n    \n      // While there remain elements to shuffle.\n      while (currentIndex != 0) {\n    \n        // Pick a remaining element.\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n    \n        // And swap it with the current element.\n        [array[currentIndex], array[randomIndex]] = [\n          array[randomIndex], array[currentIndex]];\n      }\n    \n      return array;\n    }\n\n    const solveSudoku = (grid) => {\n        var cell = findEmptyCell(grid);\n        var row = cell[0];\n        var col = cell[1];\n\n        if (row === -1) {\n          return true;\n        }\n        let values = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n        \n        values = shuffle(values);\n\n\n        for(let i = 0; i < values.length; i++){\n          let num = values[i];\n          if (isValidNumber(grid, row, col, num)) {\n            grid[row][col] = num;\n\n            if (solveSudoku(grid)) {\n              return true;\n            }\n        \n            grid[row][col] = 0;\n          }\n        }\n\n        return false;\n    }\n\n    \n    const findEmptyCell = (grid) => {\n        for (var row = 0; row < 9; row++) {\n          for (var col = 0; col < 9; col++) {\n            if (grid[row][col] === 0) {\n              return [row, col];\n            }\n          }\n        }\n        return [-1, -1];\n    }\n\n\n    const isValidNumber = (grid, row, col, num) => {\n        for (var i = 0; i < 9; i++) {\n            if (grid[row][i] === num) {\n                return false;\n            }\n        }\n        \n        for (var j = 0; j < 9; j++) {\n          if (grid[j][col] === num) {\n            return false;\n          }\n        }\n    \n        var startRow = Math.floor(row / 3) * 3;\n        var startCol = Math.floor(col / 3) * 3;\n        for (var i = 0; i < 3; i++) {\n          for (var j = 0; j < 3; j++) {\n            if (grid[startRow + i][startCol + j] === num) {\n              return false;\n            }\n          }\n        }\n    \n        return true;\n    }\n\n    const removeNumbers = (grid) => {\n        var emptyCells = 0;\n        var maxEmptyCells = 81 - 17;\n        \n        while (emptyCells < maxEmptyCells) {\n            var row = Math.floor(Math.random() * 9);\n            var col = Math.floor(Math.random() * 9);\n\n            if (grid[row][col] !== 0) {\n                grid[row][col] = 0;\n                emptyCells++;\n            }\n        }\n    }\n\n    useEffect(() => {\n        generateSudoku();\n    }, []);\n\n    useEffect(() => {\n      var colors = [];\n        for (var i = 0; i < 9; i++) {\n          colors[i] = [];\n          for (var j = 0; j < 9; j++) {\n            colors[i][j] = \"white\";\n          }\n        }\n        setColors(colors);\n    }, []);\n\n    return (\n        <div className=\"table\">\n            <div style={{color: \"white\", marginBottom: \"5rem\", textAlign: \"center\"}}>Sudoku</div>\n            <table className=\"table_1\">\n                <tbody>\n                    {sudoku.map((row, rowIndex) => {\n                        return (\n                            <tr key={rowIndex}>\n                                {row.map((cell, cellIndex) => {\n                                    if(cell === 0)\n                                    {\n                                        return (\n                                            <td key={cellIndex}><input type=\"number\" maxLength=\"1\" onChange={(e) => {\n                                              const val = e.target.value;\n                                              if(val.length > 1){\n                                                e.target.value = val.slice(0,1);\n                                              }\n                                              setSudokuValue(rowIndex, cellIndex, e.target.value)\n                                              e.target.style.color = colors[rowIndex][cellIndex];\n                                            }}/></td>\n                                        )\n                                    }\n                                    else{\n                                        return (\n                                            <td key={cellIndex}><div className=\"num\" style={{color:\"white\"}} key={cellIndex}>{cell}</div></td>\n                                        )\n                                    }\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n            <button className=\"button\" style={{margin: \"5vh\",alignSelf: \"center\", justifySelf:\"center\"}} onClick={() => {window.location.href = \"/#\"}}>Go Back</button>\n        </div>\n        \n    );\n}\n\nexport default Sudoku;"],"names":["_useState","useState","_useState2","_slicedToArray","sudoku","setSudoku","_useState3","_useState4","sudokuSolved","setSudokuSolved","_useState5","_useState6","colors","setColors","solveSudoku","grid","cell","findEmptyCell","row","col","values","array","randomIndex","currentIndex","length","Math","floor","random","_ref","shuffle","i","num","isValidNumber","j","startRow","startCol","removeNumbers","emptyCells","useEffect","newGrid","Array","from","arr","_toConsumableArray","generateSudoku","_jsxs","className","children","_jsx","style","color","marginBottom","textAlign","map","rowIndex","cellIndex","type","maxLength","onChange","e","val","target","value","slice","newColors","newSudoku","Number","setSudokuValue","margin","alignSelf","justifySelf","onClick","window","location","href"],"sourceRoot":""}